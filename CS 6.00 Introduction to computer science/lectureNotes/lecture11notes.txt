notes on the board:
    testing and debugging
    validation:
        a process designed to uncover problems and increase confidence in our program working as intended
    testing and reasoning:'
        testing is running our program on a set of inputs to make sure it is working as intended
        reasoning is about why it works the way it does and checking if we tested the program with enough inputs
    debugging:
        process of ascertaining why the program is not working
    function and performance:
        function means does it work as intended
        performance debugging is finding out why it is slow or not as fast as it should be
        this usually takes just as long or longer than getting the function to work
    defensive programming:
        writing a program in such a way that it will facilitate validation and debugging
    test:
        examine input/output pairs
    unit testing:(recommended to do while writing the program)
        validate each piece of the program independently
        so far testing individual functions later we'll talk about classes
    integration testing:(recommended after the program is finished, not at the beginning of writing)
        putting the whole program together and testing the whole thing
        overall program
    def max(f, y):
        """x&y = type(float)"""
    exaustive testing:(finding every possible solution)
        not practical for programs because even the simple program above could have billions of tests
    test suite:
        small enough to test in a reasonable amount of time,
        but large enough to give us some confindence that the program works as intended
    myth 1:
        bugs crawl into programs
        if there is a bug in the program, it is there because you put it there
    myth 2:
        bugs breed
        if there are multiple bugs, you made multiple mistakes
    goal of debugging:
        is not to eliminate one bug, the goal is to move towards a bug free program
    two best debugging tools:
        the print statement
        reading the code
    be systematic
    reduce search space:
        localize source of the problem
    study the program text:
        how could it have produced this result
        is it part of a family(is this a systematic mistake that i made throughout the program)
        how do i fix it
    scientific method:
        start by studying the available data:
            all the test results(not just the ones that didn't work, check the ones that did work)
            program text(keep in mind you don't really understand it(if you did there wouldn't be a bug))
        form a hypothesis consistent with all of the data
        design and run a repeatable experiment:
            it must have the potential to refute the hypothesis
            useful intermediate results(not just one answer at the end)
            expected result(know what you expect your program to do before even writing a test)
    find the simplest input that will provoke the bug
    find the part of the program that is most likely at fault
    binary search(get rid of half the code with each check for the bug)

definition of title subjects:
    testing:
        the process of evaluating and verifying that a software product or application does what it is supposed to do
    debugging:
        the process of finding and fixing errors or bugs in the source code of any software
