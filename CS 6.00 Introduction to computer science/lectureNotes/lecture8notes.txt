notes on the board:
    iterative exponentiation:
        2 + 3b steps
        if b = 300 902 steps
        3000 9002 steps
        30000 90002 steps
    rate of growth as the size of the problem grows:
        asymptotic notation:
            used to describe the running time of an algorithm - how much time an algorithm takes with a given input
        big oh notation:
            upper limit to the growth of a function as the input gets large
            f(x) is in big oh of n**2
            n measures the size of x
        O(b) linear:
            mathematically describes the complexity of an algorithm in terms of time and space.
            so, if we're discussing an algorithm with O(n), we say its order of, or rate of growth, is n, or linear complexity.
    recursive exponent:
        an exponential function can be expressed in the recursive form if we know the base
        recursive means a function calling itself until a "base condition" is true to produce the correct output
        t(b) = 3 + t(b-1)       recurrence
            =3 + 3 + t(b-2)     O(b)
            =3k + t(b-k)
        done b-k = 1 k = b-1
        3(b-1) + t(1)
        =3(b-1) + 2 = 3b-1
    a**b = (a*a)**(b/2) b even
         = a*(a**(b-1)) b odd
    b even t(b) = 6 + t(b/2)
    b odd  t(b) = 6 + t(b-1)
                = 12 + t(b-1/2)
    t(b) = 12 + t(b/2)
         = 12 + 12 + t(b/4)
         = 12 + 12 + 12 + t(b/8)
         = 12k + t(b/2**k)
         b/2**k = 1 k = log2b   O(logb)
    O(n*m)
    if n == m O(n**2) quadratic(involving the second and no higher power of an unknown quantity or variable)
    t(n) = 1 + t(1) + 2t(n-1)
        = 3 + 2t(n-1)
        = 3 + 2*3 + 4t(n-2)
        = 3 + 2*3 + 4*3 + 8t(n-3)
        = 3(1 + 2 + 4 + ... + 2**k-1) + 2**kt(n-k)
    O(2**n) exponential(one whose running time grows as an exponential function of the size of its input(AVOID WHEN POSSIBLE!!))
    n = 1000        nanosecond speed
    log             10 nanoseconds      10 milliseconds
    linear          1 microsecond       1 sec
    quadratic       1 millisecond       16 minutes
    exponential     10**284 years
    search a sorted list    O(len(s))
    list of ints:
        ith element start + 4*i
    general lists:
        what is the access time
    linked lists:
        a data structure that store data in the form of a chain
    constant access
    logarithmic

definitions for lesson title subjects:
    complexity:
        a term that includes software properties that affect internal interactions
    log search algorithm:
        a search algorithm that finds the position of a target value within a sorted array.
        Binary search compare the target value to the middle element of the array
    linear search algorithm:
        a sequential search algorithm that starts at one end and goes through each element of a list until the desired element is found,
        otherwise the search continues till the end of the data set
    quadratic search algorithm:
        the problem of finding a vector x that minimizes a quadratic function, possibly subject to linear constraints
    exponential search algorithm:
        combines two search methods:
            1. first find the range of an element being sought
            2. perform a binary search upon that range
