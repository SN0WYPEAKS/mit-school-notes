notes written on the board:
    simple things to check when looking for bugs:
        reversed order of arguments
        spelling
        initialization
        object vs value equality ==
        aliasing(assumptions made during optimization about which variables can point to or occupy the same storage area):
            deep vs shallow copy
        side effects
    keep a record of what you tried
    think about reconsidering your assumptions
    debug code, not comments
    get help(swallow your pride) - try to explain what you think the program is doing
    walk away(take a break, come back with fresh eyes)
    what to do when you found the bug:
        haste makes waste:
            don't just make the first change that comes to mind
            think if the change will fix all symptoms you have seen
            think about what could break if the change is implemented
        code should not always grow:
            sometimes it is better to walk through the code and tidy it up sometimes you will find the bug just by stepping through and doing this
        make sure you can revert:
            save old versions to go back to if you make to many mistakes that ended up making the code worse
    optimization problems:(in general, every optimization problem is the same and has two parts)
        a function that you are either trying to maximize or minimize the value of(these are duals)
        a set of constraints that must be honored(possibly an empty set of constraints)
    shortest path problem:
        the shorest distance to get to the destination with constraints that can include, no highways, least time, or shortest distance
    traveling salesman(tsp):
        given a number of cities and the cost of traveling from city to city in an airplane, what is the least cost for a round trip
    bin packing:
        filling a container with different size shapes and how to stack them most efficiently
    sequence alignment problems:
        i.e. aligning DNA sequences or RNA sequences
    knapsack problem:
        what to take in a limited space
    problem reduction:
        you're given some problem to solve that you have never seen before.
        the first question is did someone else already solve this kind of problem.
        take a new problem, and map it onto an old problem to use its solution
        better then coming up with our own version of each problem
    continuous knapsack problem:
        assume you are a burgler with a knapsack that can hold 8lbs of stuff, you must decide what you can take
        4 lbs of gold dust          cost of gold * lbs of gold +
        3 lbs of silver dust        cost of silver * lbs of silver +
        10 lbs of raisins           cost of raisins * lbs of raisins
        lbs gold + lbs silver + lbs raisins <= 8lbs
        an instance of a greedy algorithm
    greedy algorithm:(good sometimes)
        doglets     doges lt
        dogs let
        locally optimal decisions do not always lead to global optimization
    0/1 knapsack problem:(discrete version of the knapsack problem)
        n items(at every step, we have to take the whole item or none of the item)
    dynamic programming:
        overlapping subproblems:
            a problem is said to have overlapping subproblems if the problem can be broken down into subproblems
            which are reused several times or a recursive algorithm for the problem solves the same subproblem over and over
            rather than always generating new subproblems.
        optimal substructure:
            if the optimal solution of the given problem can be obtained by using the optimal solution to its subproblems
            instead of trying every possible way to solve the subproblems

definitions of the title subjects:
    debugging:
        the process of finding and fixing errors or bugs in the source code of any software
    knapsack problem:
        the problem often arises in resource allocation where the decision-makers
        have to choose from a set of non-divisible projects or tasks under a fixed budget or constraint
    dynamic programming:
        Dynamic programming is a computer programming technique where an algorithmic problem is first broken down into sub-problems,
        the results are saved, and then the sub-problems are optimized to find the overall solution
        which usually has to do with finding the maximum and minimum range of the algorithmic query
