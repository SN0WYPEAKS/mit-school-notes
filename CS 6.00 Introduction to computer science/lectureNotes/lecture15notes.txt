notes on the board:
    points or plane 2-list:
        cartesian point:
            c1 = [1,2]
        polar:
            p2 = [2,pi(3.14)/2]
    class:
        template for creating instances of an object
        cp1, cp2 are both instances of this type
        each instance will have some internal attributes
        cp1.x = 1.0
    shallow equality:(object equality)
        test this first
        'is'
        'is' tests if two things point to exactly the same reference
    deep equality:(value equality)
        we get to define
        tests if the two things equal the same thing
    __init__ - creates an instance
             - use 'self' to refer to that instance
    p.x
    methods:
        can access values of the specific instance
        p.cartesian - is a kind of accessor
        p.x = 'foobar'
        data hiding:
            one can only access instance values through defined methods
            python doesn't do this
    methods for classes:
        __init__ - creates instance
        __str__ - printed representation
        __cmp__ - comparisons
        __eq__ - same
        operator overloading
    instance - methods/fields = attributes of the instance
    self:
        allows an instance to get access to its own defined parameters
        __init__ uses 'self' to refer to that instance

definitions of the subjects in the title:
    abstract data types:
        a data type, where only the behavior is defined but not the implementation(array, list, map, queue,...)
    classes:
        an extensible program-code-template for creating objects,
        providing initial values for state(member variables)
        and implementations of behavior(member functions or methods)
    methods:
        a programmed procedure that is defined as part of a class
        and is available to any object instantiated from that class
