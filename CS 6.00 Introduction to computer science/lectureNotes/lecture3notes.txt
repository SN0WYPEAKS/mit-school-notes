Notes written on the board:
    data:
        numbers
        strings
        booleans
    operations:
        +, *
        and, or
    commands:
        assignment
        input/ouput
        conditionals
        loop mechanisms(while)
    iterative programs:
        choose a variable to count
        initialize it outside of the loop
        set up the right end test (count variable)
        construct the block of code:
            change the count variable
        what to do when done
    flowchart:
        start
        ans = 0
        if ans*ans<=x   ans=ans+1(repeat the test)
        if not print ans
    simulate:
        ans    x   ans*ans
        0      16   0
        1           1
        2           4
        3           9
        4           16
        5           25
        bug:
            it goes further than it should because the code says (if ans*ans<=x) it should say (if ans*ans<x)
    defensive programming:
        making the software behave in a predictable manner despite unexpected inputs or user inputs
    exhaustive enumeration:
        try all reasonable values until you find solution
    for loop:
        for <var> in <some collection>:
            block of code
    tuple - ordered sequence of elements:
        (immutable)
        tuple = (1, 2, 3, 4)
    in most cases, you can interchange tuples and lists (MOST not all)

definition of the subjects in the lesson title:
    common code patterns:
        typical solutions to common problems in software design
    iterative programs:
        a sequence of instructions or code being repeated until a specific end result is achieved
