Notes written on the board:
    primitive types:
        numbers and strings
        value and type
    combine in expressions:
        operands and operators
    values entered directly into the interpreter:
        evaluates and prints
    script - no print unless explicit
    type conversion
    type checking:
        weak vs strong type checking:
            strong:
                strongly typed languages have a stronger type-check and enforce the type assigned (at compile or run time)
            weak:
                weakly typed languages allows expressions between various different types
    operator precedence:
        **>>*/>>+-
    when in doubt, use params
    variables and values:
        assignment:
            x = 3*5
            x points to 15
            y = 15 points to the same value as x
            z = x points to the same value as x
    type of variable - gets from value:
        x = 3
    dynamic types
        x = 'abc' x now points to 'abc' not 3
    don't change types arbitrarily
    variables can be used anywhere you can use a value
    statement = legal commands that python can interpret:
        print, assignment
    variable names - important to document:
        28 keywords excluded
    straight line program:
        a representation of a computation involving the operations:
            +, -, *,/ and **
    branching programs:
        something that can change the order of instructions based on a test (usually the value of some variable)
    conditional:
        the condition that changes the branch of a program
    syntax - : important
        identifies a block
            : is start
            carriage return is the end
    if <some test>:
        block of instructions
    else :
        some other block of instructions
    iteration or loops:
        x y itersleft
        3 0 3
          3 2
          6 1
          9 0
        print(y)

definition of the subjects in the lesson title:
    branching:
        an instruction that tells a computer to begin executing a different part of a program rather than executing statements one-by-one(return, break, continue, goto)
    conditionals:
        setting up conditions for the program to do one thing or another based on which condition is met(if statements)
    iteration:
        a function that repeats a block of code in a specified order, often until a specific result occurs(for/while loops)
