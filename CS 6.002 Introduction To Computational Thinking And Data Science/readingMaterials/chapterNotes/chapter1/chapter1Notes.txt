CHAPTER 1 GETTING STARTED:
    A COMPUTER ONLY DOES TWO THINGS:
        it performs calculations and it remembers the results
        of those calculations
        the typical computer performs a billion or so calculations
        a second
    BYTE:
        the number of bits that make up a single character(usually 8)
    DECLARATIVE KNOWLEDGE:
        is composed of statements of fact
    IMPERATIVE KNOWLEDGE:
        is "how to" knowledge, or recipes for deducing information
    ALGORITHM:
        a sequence of simple steps, together with a flow of control
        that specifies when each step is to be executed
        a bit like a recipe it has well-defined steps to follow
    FIXED-PROGRAM COMPUTERS:
        computers designed to accomplish specific things that
        couldn't do anything else
    STORED-PROGRAM COMPUTER:
        stores (and manipulates) a sequence of instructions
    INTERPRETER:
        a program that can execute any legal set of instructions,
        and thus can be used to compute anything that one can describe
        using some basic set of instructions
    FLOW OF CONTROL:
        enables an interpreter to perform a test after an instruction
        from a sequence and based on the results of that test execution
        may jump to some other point in the sequence of instructions
    UNIVERSAL TURING MACHINE:
        the machine had an unbounded memory in the form of tape on which
        one could write zeros and ones, and some very simple primitive
        instructions for moving, reading, and writing to the tape
    CHURCH-TURING THESIS:
        states that if a function is computable, a turing machine can
        be programmed to compute it
    HALTING PROBLEM:
        It asks whether there exists a specific algorithm that,
        given a set of instructions as input for any computer program,
        can accurately determine whether the program will
        halt or run indefinitely
    TURING COMPLETENESS:
        a programming language is said to be turing complete if it
        can be used to simulate a universal turing machine
    LITERALS:
        e.g. the number 3.2 and the string 'abc'
    INFIX OPERATORS:
        e.g. + and /
    SYNTAX:
        defines which strings of characters and symbols are well formed
    STATIC SEMANTICS:
        defines which syntactically valid strings have a meaning
        (you cannot divide 3.2/'abc')
    SEMANTICS:
        associates a meaning with each syntactically correct string of
        symbols that has no static semantic errors
        (programming languages are designed so that eachlegal program
        has exactly one meaning)