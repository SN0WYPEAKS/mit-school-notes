notes from the lecture:
    newtonian mechanics:
        every effect has a cause
        the world can be understood causally
    copenhagen doctrine(bohr and heisenberg) of causal nondeterminism:
        at its most fundamental tevel, the behavior of the physical world cannot be predicted.
        fine to make statements of the form 'x is highly likely to occur,'
        but not of the form 'x is certain to occur.'
    stochastic processes:
        any ongoing process where the next stae might depend on both the previous states
        and some random element.
        e.g.:
            def rollDie():
                """returns an int between 1 and 6"""
            def rollDie():
                """returns a randomly chosen int between 1 and 6"""

    implementing a random process:
        import random

        def rollDie():
            """returns a random int between 1 and 6"""
            return random.choice([1,2,3,4,5,6]) # uniform(has an equally likely chance to choose each option)

        def testRoll(n = 10):
            result = ''
            for i in range(n):
                result = result + str(rollDie())
            print(result)

    three basic facts about probability:
        1.  probabilities are always in the range 0 to 1.
            0 if impossible, and 1 if guaranteed.
        2.  if the probability of an event occurring is p,
            the probability of it not occurring must be 1 - p.
        3.  when events are independent of each other,
            the probability ofa ll of the events occurring is equal
            to a product of the probabilities of each of the events occurring.
        example:
            if a = 0.5 and b = 0.4
            the probability of both a and b occurring is a*b which in this case is 0.2
    the birthday problem:
        what's the probability of at least two people in a group having the same birthday?
        if there are 367 people in the group?
        what about smaller numbers?
        if we assume that each birthdate is equally likely:
            1 - 366!/366**N*(366 - n)!
        without this assumption, VERY complicated.

    approximation using a simulation:
        def sameDate(numPeople, numSame):
            possibleDates = range(366)
            # possibleDates = 4*list(range(0, 57)) + [58]\
            #                 + 4*list(range(59, 366))\
            #                 + 4*list(range(180, 270))
            birthdays = [0]*366
            for p in range(numPeople):
                birthDate = random.choice(possibleDates)
                birthdays[birthDate] += 1
            return max(birthdays) >= numSame

        def birthdayProb(numPeople, numSame, numTrials):
            numHits = 0
            for t in range(numTrials):
                if sameDate(numPeople, numSame):
                    numHits += 1
            return numHits/numTrials

        import math

        for numPeople in [10, 20, 40, 100]:
            print('For', numPeople,
                'est. prob. of a shared birthday is',
                birthdayProb(numPeople, 2, 10000))
            numerator = math.factorial(366)
            denom = (366**numPeople)*math.factorial(366-numPeople)
            print('Actual prob. for N = 100 =',
                1 - numerator/denom)

    why is 3 much harder mathematically:
        for 2 the complementary problem is 'all birthdays distinct'
        for 3 people, the complementary problem is a complicated disjuct:
            all birthdays distinct or
            one pair and rest distinct or
            two pairs and rest distinct or
            ...

definitions of title subjects:
    stochastic thinking:
        emphasis on chance, uncertainty, indeterminacy, probability and randomness.
