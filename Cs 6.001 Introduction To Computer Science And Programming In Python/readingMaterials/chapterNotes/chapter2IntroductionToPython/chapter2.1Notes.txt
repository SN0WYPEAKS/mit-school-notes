CHAPTER 2.1 THE BASIC ELEMENTS OF PYTHON:
    LOW-LEVEL VERSUS HIGH-LEVEL:
        refers to whether we program using instructions and data objects at the level
        of the machine(e.g. move 64 bits of data from this location to that location)
        or whether we program using more abstract operations(e.g. pop up a menu on the
        screen) that have been provided by the language designer
    GENERAL VERSUS TARGETED TO AN APPLICATION DOMAIN:
        refers to whether the primitive operations of the programming language are
        widely applicable or are fine-tuned to a domain.
    INTERPRETED VERSUS COMPILED:
        refers to whether the sequence of instructions written by the programmer,
        called source code, is executed directly (by the interpreter) or whether
        it is first converted (by a compiler) into a sequence of machine-level
        primitive operations.
    SOURCE CODE:
        the version of software as it is originally written (i.e., typed into
        a computer) by a human in plain text
    MACHINE CODE:
        code that is directly interpreted by the computer hardware
    THERE ARE ADVANTAGES TO BOTH APPROACHES:
        it is often easier to debug programs written in languages that are designed
        to be interpreted, because the inerpreter can produce error messages that are
        easy to correlate with the source code. compiled languages usually produce
        programs that run more quickly and use less space.
    PYTHON:
        a general-purposed programming language that can be used effectively to build
        almost any kind of program that does not need direct access to the computer's
        hardware. python is not optimal for programs that have high reliability
        constraints (because of its weak semantic checking) or that are built and
        maintained by many people or over a long period of time (again because of
        weak static semantic checking)
        simple and beginner-friendly language to learn
CHAPTER 2.1 THE BASIC ELEMENTS OF PYTHON:
    PYTHON PROGRAMS(OR SCRIPTS):
        are a sequence of definitios and commands. these definitions are evaluated and
        the commands are executed by the python interpreter in something called the shell
    SHELL:
        the interpreter that executes your python programs, other pieces of python code,
        or simple commands
    COMMAND(STATEMENT):
        instructs the interpreter to do something.
CHAPTER 2.1.1 OBJECTS, EXPRESSIONS, AND NUMERICAL TYPES:
    OBJECTS:
        are the core things that python programs manipulate.
    TYPE:
        every object has a type that defines the kinds of things that programs can do
        with objects of that type
        types are either scalar or non-scalar
    SCALAR OBJECTS:
        are indivisible. think of them as the atoms of the language.
        PYTHON HAS 4 SCALAR OBJECTS:
            INT:
                used to represent integers
            FLOAT:
                used to represent real numbers. literals of type float always include
                a decimal point(or scientific notation)
                FLOATING POINT NUMBERS:
                    values of type float are stored in the computer as floating point
                    numbers. this representation has many advantages. however, under
                    some situations it causes floating point arithmetic to behave in
                    ways that are slightly different from arithmetic on real numbers
            BOOL:
                used to represent the boolean values True and False
            NONE:
                a type with a single value
    NON-SCALAR OBJECTS:
        for example strings, have internal structure
    EXPRESSIONS:
        objects and operators can be combined to form expressions, each of which
        evaluates to an object of some type(the value of the expression)
    OPERATORS:
        ==:
            is a boolean that checks if two objects evaluate to the same value
        I+J:
            the sum of i and j. if i and j are both of type int, the result is
            an int. if either of them is a float, the result is a float.
        I-J:
            i minus j. same rules apply
        I*J:
            the product of i and j. same rules apply
        I//J:
            is integer division. for example, the value of 6//2 is the int 3 and
            the value of 6//4 is the int 1. the value is 1 because integer division
            returns the quotient and ignores the remainder
        I/J:
            i divided by j. the result always returns a float
        I%J:
            the remainder when the int i is divided by the int j. it is typically
            pronounced "i mod j", which is short for "i modulo j."
        I**J:
            i raised to the power j. if both are int, the result is int. if either
            are float, the result is float
        COMPARISON OPERATORS;
            ==(equal)
            !=(not equal)
            >(greater)
            >=(at least)
            <(less)
            <=(at most)
        ORDER OF OPERATIONS:
            applies to operators but can be overridden by parentheses
        BOOL OPERATORS:
            A AND B:
                is true if both a and b are true, and false otherwise
            A OR B:
                is true if at least one of a or b is true, and false otherwise
            NOT A:
                is true if a is false, and false if a is true
CHAPTER 2.1.2 VARIABLES AND ASSIGNMENT:
    VARIABLES:
        provide a way to associate names with objects
    ASSIGNMENT:
        associates the name to the left of the = symbol with the object denoted
        by the expression to the right of the =. a variable is just a name,
        nothing more. an object can have one, more than one, or no name
        associated with it
    RESERVED WORDS(KEYWORDS):
        words in python that have built-in meanings and cannot be used as variable
        names.
    COMMENTS:
        text following the symbol # is not interpreted by python making it possible
        to explain a code snippet right where it is
    PYTHON ALLOWS MULTIPLE ASSIGNMENT:
        THE STATEMENT:
            x, y = 2, 3 binds x to 2 and y to 3
CHAPTER 2.1.3 IDLE:
    INTEGRATED DEVELOPMENT ENVIRONMENT(IDE):
        using the text editor that is part of an IDE is much more convenient
        than typing directly in the shell
    IDLE:
        the IDE that comes a s part of the standard python installation package
        IDLE PROVIDES:
            a text editor with syntax highlighting, autocompletion, and
            smart indentation
            a shell with syntax highlighting
            an integrated debugger